==== 08/02/22 ====
SDL2 did not work on my machine, tried both Cygwin and MinGW(64 and 32bit) in Clion and tried using it in Visual Studio.
Tried both Visual Studio and MinGW specific versions of SDL2.
Closest to working was Clion with 64bit MinGW where code compiled but when any of the functions from SDL were used
'Segmentation Fault' would be thrown.
--------------
Managed to integrate SFML 2.5.1 32bit into CLion, it seems to run SFML's functions correctly, will use that as a substitute for SDL2.
--------------
Created repository with CLion project, added README in 'src' folder to state specific version of SFML and MinGW to use when compiling code.
Also created this file for any notes on progress.
==================

====09/02/22====
Completed first draft of the Project Outline document.
-------------
Started working on basic SFML functions and overall design of the code.
-------------
Created a couple of loops and started analysing ray casting algorithm; started working on mapObject loading segment but stopped as it's not
needed for now. Test 2d array will be used instead.
-------------
Removed mapObject loading segment, managed to get the raycaster to work, although there is a fish eye lens and some weird shift
to camera placement as well as weird movement bug.
-------------
Completely fixed the raycasting, need to figure out how to cap framerate to 60 as the moving and rotating speed are tied
to frame timings. Changed up the mapObject a little to create more room for traversal.
-------------
Added floor and ceiling colouring, fixed rotate and move speeds relying on framerate. Tidied up some code.
================

====17/02/22=====
Added first version of texturing, because previous implementation was not using them, floors and ceilings are not being coloured
currently as they need additional texture parameter to be renderer, possibly an easy fix. Performance dropped once again.
Thanks to fixed time step I implemented yesterday the game still feels ok, the framerate drop could be connected to
relatively small processing power of my laptop's gpu.
The textures don't scale when approached and rather try to fit within the camera view.

Fixed floor and ceiling, not going to place any textures on them, just plain grey colour. Added music (probably not legal)
for fun (must be .FLAC, .WAV, or .Ogg but last doesn't work) and optimized the game enough to completely remove massive
stutter when run on battery. Currently, it stays around 30fps at all times.
Might need to create debug class for all info display and stuff, but it works for now.
Added multiple definitions and if defs for some debug purposes.

The texturing is mirroring some of them, need to figure out how to prevent that, tutorials have code that handles them,
but they seem to invert everything permanently in my raycaster. -- Fixed it c:

Fixed the textureWallSheet distortion but the rendering goes out of render bounds creating '3D movie' like effect. If I restrict
associated values then distortion comes back.

====18/02/22====
Created DebugConsole class, will be useful for toggling between options without a menu.

====19/02/22====
Fixed texture distortion. Simple proportion of overflown pixels at the top or bottom / (total height of render + overflown pixels) =
= X / single texture height, where X is how much added to or subtracted from the texture Y coordinate must be.
Changed mapObject from int to unsigned char, movement checks now check if tile is <= '.' as all the items will be represented
by characters with lower values than numbers in ascii table.

====21/02/22====
Started reworking mapObject handling as sprite handling requires to store each sprite position before rendering them. Removed
MapHandler class and replaced it with Map class with similar functionality.

====23/02/22====
Created most of the basic sprite rendering code. There is a segmentation fault caused by unordered_map property of Map
class, its loading method fails at inserting second sprite currently placed in the mapObject.

Managed to fix most of the loading issues by redesigning some parts of the Map class and the way sprite data is stored.
Currently, renderer draws a black rectangle in the top left cornet, length of which varies and changes depending on the distance
to the sprite position.

====26/02/22====
Created first working version of sprites, created a couple of textures and improved mapObject loading as well as mapObject's size.

====28/02/22====
Fixed all issues connected to sprites; the distance was calculated wrongly creating weird effect where when actor would cross
axis on which the sprites are displayed, the furthest away would be drawn in front of the rest.
Fixed bug where sprites would draw on top of each other when using more than one, turned out to be an easy fix with clearing
vertex buffer that caused the problem.

Improved the map01, added golden key sprite, added point system, added timer.

Created text equipment display.

====08/03/22====
Scrapped door rendering, instead the game will use simple system I implemented earlier where when cast ray hits a door
symbol, it calculates the distances and based on that it decides whether the actor is close enough to open it.

Added little level summary bit.

====10/03/22====
Started refactoring and breaking down the biggest class, Raycaster. Menu, controlling, setting up game code have been
extracted and put into own classes.
Fixed a couple of issues with Agent's display.

Managed to remove around 300 lines of code from Raycaster class by moving it and creating extra classes.


Latest bug - moved setting up and randomizing map in Raycaster runGame() to GameSetup and Map classes, also moved
the loading itself from top of the runGame() to if statement in a while loop below.

====11/03/22====
Fixed the bug, the runGame() needs to load in map details first thing before entering loop, otherwise it won't load
the map details properly and will fail to render any stuff.


====24/03/22====
FINALLY GOT THE TORCH TO WORK,
needed to install Visual Studio Community 2017, then download SFML 2.5.1 for VS2017 compiler and apparently
Libtorch is 32bit so needed to tweak what version of SFML I was using and what is the toolchain platform.

There seems to be quite a lot of weird messages while running project, it takes like 5 times longer just because
Libtorch is being compiled. BUT IT WORKS.

Had to change 2 VLAs into vectors as MSVC apparently doesn't handle variable length variables, needed to refactor
just one function for sorting the sprites and that's it, the old code is commented out, and original function
differs only in parameters.
Apparently the algorithm for sorting the sprites is not working properly and doesn't calculate the order
properly when observed from two neighbouring angles.
--Fixed, caused by typo in reordering distance and order after sorting them in sortSprites function.


Quick note, https://www.remove.bg/ <- using this site for removing background from paint pixel arts


Will add subsection of choosing a level in menu, rand is too unreliable.
Added first version of level selection. Works fine, cleaned up some useless map loading code from Raycaster, it's
replaced with loading those details in pickAndLoad map function.


====17/04=22====
need to try 64bit versions of mingw, sfml, pytorch and python. Mingw supposedly doesnt suppor python in 32 bits.


====18/04/22====
Started drafting threading, python is semi working now, it crashes when calling function inside of a module.