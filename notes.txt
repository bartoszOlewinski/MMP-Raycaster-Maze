==== 08/02/22 ====
SDL2 did not work on my machine, tried both Cygwin and MinGW(64 and 32bit) in Clion and tried using it in Visual Studio.
Tried both Visual Studio and MinGW specific versions of SDL2.
Closest to working was Clion with 64bit MinGW where code compiled but when any of the functions from SDL were used
'Segmentation Fault' would be thrown.
--------------
Managed to integrate SFML 2.5.1 32bit into CLion, it seems to run SFML's functions correctly, will use that as a substitute for SDL2.
--------------
Created repository with CLion project, added README in 'src' folder to state specific version of SFML and MinGW to use when compiling code.
Also created this file for any notes on progress.
==================

====09/02/22====
Completed first draft of the Project Outline document.
-------------
Started working on basic SFML functions and overall design of the code.
-------------
Created a couple of loops and started analysing ray casting algorithm; started working on map loading segment but stopped as it's not
needed for now. Test 2d array will be used instead.
-------------
Removed map loading segment, managed to get the raycaster to work, although there is a fish eye lens and some weird shift
to camera placement as well as weird movement bug.
-------------
Completely fixed the raycasting, need to figure out how to cap framerate to 60 as the moving and rotating speed are tied
to frame timings. Changed up the map a little to create more room for traversal.
-------------
Added floor and ceiling colouring, fixed rotate and move speeds relying on framerate. Tidied up some code.
================

====17/02/22=====
Added first version of texturing, because previous implementation was not using them, floors and ceilings are not being coloured
currently as they need additional texture parameter to be renderer, possibly an easy fix. Performance dropped once again.
Thanks to fixed time step I implemented yesterday the game still feels ok, the framerate drop could be connected to
relatively small processing power of my laptop's gpu.
The textures don't scale when approached and rather try to fit within the camera view.

Fixed floor and ceiling, not going to place any textures on them, just plain grey colour. Added music (probably not legal)
for fun (must be .FLAC, .WAV, or .Ogg but last doesn't work) and optimized the game enough to completely remove massive
stutter when run on battery. Currently it stays around 30fps at all times.
Might need to create debug class for all info display and stuff, but it works for now.
Added multiple definitions and ifdefs for some debug purposes.

The texturing is mirroring some of them, need to figure out how to prevent that, tutorials have code that handles them
but they seem to invert everything permanently in my raycaster. -- Fixed it c:

Fixed the textureWallSheet distortion but the rendering goes out of render bounds creating '3D movie' like effect. If I restrict
associated values then distortion comes back.

====18/02/22====
Created DebugConsole class, will be useful for toggling between options without a menu.

====19/02/22===
Fixed texture distortion. Simple proportion of overflown pixels at the top or bottom / (total height of render + overflown pixels) =
= X / single texture height, where X is how much added to or subtracted from the texture Y coordinate must be.
Changed map from int to unsigned char, movement checks now check if tile is <= '.' as all the items will be represented
by characters with lower values than numbers in ascii table.